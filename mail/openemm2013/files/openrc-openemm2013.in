#!/sbin/openrc-run

# Add the following lines to /etc/rc.conf to enable ${name}:
# ${name}_args (str):         Optional arguments to OAJBoss
# ${name}_log_stdout (str)       OpenEMM log output stdout, filename.
# ${name}_log_stderr (str)       OpenEMM log output stderr, filename.


name="%%APP_SHORTNAME%%"

${name}_logdir="%%LOG_DIR%%"
${name}_log_stdout="${${name}_log_stdout:-"${${name}_logdir}/log"}"
${name}_log_stderr="${${name}_log_stderr:-"${${name}_logdir}/error"}"
${name}_args="${${name}_args:-""}"
${name}_sleep="${${name}_sleep:-"5"}"
${name}_kill9="${${name}_kill9:-""}"
${name}_additional_killall="${${name}_additional_killall:-""}"
${name}_user="%%USER%%"
${name}_group="%%GROUP%%"
${name}_lockdir="/var/run/openemm"

command_user=${name}_user

pidfile="%%PID_FILE%%"
tomcat_pidfile="tomcat8.pid" # todo replace dynamic with current version
sendmail_pidfile="sendmail.pid"

OPENEMM_HOME="%%APP_HOME%%"
#minimal requirements must be set for our javavmwrapper
JAVA_VERSION="1.7+"
export JAVA_VERSION

start()
{
	if [ ! -d "${${name}_logdir}" ]
	then
		install -d -o ${${name}_user} ${${name}_logdir}
	fi

	if [ ! -d "${${name}_lockdir}" ]
	then
		install -d -o ${${name}_user} ${${name}_lockdir}
	fi

	echo "Preconditions for ${name}"
	echo "   - check if sendmail processes are stopped, it will be started via this application"

	if [ -f "/var/run/${sendmail_pidfile}"]
	then
		echo "TODO STOP all sendmail processes"
		service sendmail stop
		
		# check for sendmail queues started via openemm
		if [ -f "${${name}_lockdir}/mailer.pid" ]
		then
			echo "Stop Mailer Service...."
        		pkill qctrl
			pkill sendmail 
		fi
	fi

	echo "Starting ${name}."

	# check for the startup pyhton scripts


	# check if tomcat is running otherwise warning
	if [ ! -f "/var/run/${tomcat_pidfile}" ]
	then
		echo "Tomcat is not running please start tomcat first"
	else
		echo "Tomcat is running... starting app"
	fi

	echo "Start BOUNCE Servcie...."	
 	supervise-daemon -u ${${name}_user} ${OPENEMM_HOME}/bin/bounce.sh start >> ${${name}_logdir}/bounce.log 2>> ${${name}_logdir}/bounce_error.log
	echo "Start Merger Service...."
	supervise-daemon -u ${${name}_user} ${OPENEMM_HOME}/bin/merger.sh start >> ${${name}_logdir}/merger.log 2>> ${${name}_logdir}/merger_error.log
	echo "Start Mailer Service...."
	supervise-daemon ${OPENEMM_HOME}/bin/mailer.sh start >> ${${name}_logdir}/mailer.log 2>> ${${name}_logdir}/mailer_error.log
	pgrep sendmail > ${openemm2013_lockdir}/mailer.pid
	
	echo "Start SLRT scan Service...."
	supervise-daemon -u ${${name}_user} ${OPENEMM_HOME}/bin/slrtscn.sh start >> ${${name}_logdir}/slrtscn.log 2>> ${${name}_logdir}/slrtscn_error.log

	echo "START THE APP ITSELF..."
	#daemon -u ${${name}_user} ${OPENEMM_HOME}/bin/standalone.sh ${${name}_args} >> ${${name}_log_stdout} 2>> ${${name}_log_stderr}

	#sleep ${${name}_sleep}	# let daemon(8) and sh(1) finish before executing pgrep(1)
	#pgrep -U ${${name}_user} -f ${OPENEMM_HOME}/modules > ${pidfile}
	#chown ${${name}_user} $pidfile
}

stop()
{

	${OPENEMM_HOME}/bin/bounce.sh stop
	${OPENEMM_HOME}/bin/merger.sh stop

	#${OPENEMM_HOME}/bin/mailer.sh stop
	service sendmail stop   # pkill sendmail
	#sendmail stop
	pkill sendmail
	terminator bin/qctrl #pkill qctrl
	${OPENEMM_HOME}/bin/slrtscn.sh stop

	# Subvert the check_pid_file procname check.
	# at the moment we dont't handle this here
	if [ -f ${pidfile} ]
	then
		kill `cat ${pidfile}`
		# Only if we aware that our setup can hangs, and only after trying simple kill, we can kill it hard way.
		if [ ! -z "${${name}_kill9}" ]
		then
			sleep ${${name}_sleep}
			#kill  -9 `cat ${pidfile}`
		fi
		# In some setups, OpenEMM (Tomcat) can spawn some child processess, which could prevent it from stopping, and freeing net ports.
		# Let's blindly kill them all, since we are really know what we are doing.
		if [ ! -z "${${name}_additional_killall}" ]
		then
			sleep ${${name}_sleep}
			killall ${${name}_additional_killall}
		fi
	fi
}

terminator()
{
        while [ $# -gt 0 ] ; do
                __pat="$1"
                shift
                if [ "$__pat" ] ; then
                        for sig in 15 9 ; do
                                __run="`ps -aux | grep -- \"$__pat\" | grep -v grep | awk '{ print $2 }'`"
                                if [ "$__run" ] ; then
                                        echo "Stop $__pat program with signal $sig .. "
                                        kill -$sig $__run >/dev/null 2>&1
                                        sleep 2
                                        echo "done."
                                fi
                        done
                fi
        done
}

depend()
{
	keyword -shutdown
	need localmount
	after bootmisc
}
